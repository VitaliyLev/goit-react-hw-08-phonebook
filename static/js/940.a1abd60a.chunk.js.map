{"version":3,"file":"static/js/940.a1abd60a.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/ContactsFilter/Filter.styled.jsx","components/ContactsFilter/Filter.jsx","pages/ContactsPage.styled.jsx","pages/ContactsPage.jsx"],"sourcesContent":["export const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilteredContacts = state => state.filter;\n","import styled from 'styled-components';\n\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  -webkit-box-pack: center;\n  justify-content: center;\n  -webkit-box-align: center;\n  align-items: center;\n  margin-bottom: 50px;\n  padding-top: 20px;\n  padding-bottom: 20px;\n  box-shadow: rgb(34 60 80 / 20%) 0px 5px 10px 2px;\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  -webkit-box-pack: justify;\n  justify-content: space-between;\n  width: 340px;\n  padding: 12px;\n\n  input {\n    width: 75%;\n\n    height: 20px;\n    padding-left: 10px;\n    border: 1px solid rgba(33, 33, 33, 0.2);\n    border-radius: 4px;\n    transition: border-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0s;\n\n    outline: none;\n    :hover,\n    :focus {\n      box-shadow: rgb(38, 57, 77) 0px 5px 30px -7px;\n    }\n  }\n`;\n\nexport const Button = styled.button`\n  transition: all 200ms linear 0s;\n  border: 1px solid grey;\n  border-radius: 10px;\n  background-color: white;\n  cursor: pointer;\n  font-size: 15px;\n\n  :not(:last-child) {\n    margin-right: 10px;\n  }\n  :hover {\n    box-shadow: rgb(38, 57, 77) 0px 20px 30px -10px;\n    background: rgb(169, 219, 216);\n  }\n`;\n","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { nanoid } from 'nanoid';\n\nimport { Form, Label, Button } from './ContactForm.styled';\n\nexport function ContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const nameInputId = nanoid();\n  const numberInputId = nanoid();\n\n  const handleFormSubmit = e => {\n    e.preventDefault();\n    addNewContact({ name, number });\n    reset();\n  };\n\n  const addNewContact = ({ name, number }) => {\n    const newContact = {\n      name: name.trim(),\n      number: number.trim(),\n    };\n\n    const contactCheck = contacts.find(contact => {\n      return contact.name === newContact.name;\n    });\n\n    contactCheck\n      ? alert(`${name} is already in the contacts`)\n      : dispatch(addContact(newContact));\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  const handleInputChange = e => {\n    switch (e.target.name) {\n      case 'name':\n        setName(e.target.value);\n        break;\n      case 'number':\n        setNumber(e.target.value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  return (\n    <>\n      <Form action=\"\" onSubmit={handleFormSubmit}>\n        <Label htmlFor={nameInputId}>\n          Name\n          <input\n            onChange={handleInputChange}\n            value={name}\n            type=\"text\"\n            name=\"name\"\n            placeholder=\"Input name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n        </Label>\n\n        <Label htmlFor={numberInputId}>\n          Number\n          <input\n            onChange={handleInputChange}\n            value={number}\n            type=\"tel\"\n            name=\"number\"\n            placeholder=\"Input number xxx-xx-xx\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </Label>\n        <Button type=\"submit\">Add contact</Button>\n      </Form>\n    </>\n  );\n}\n","import styled from 'styled-components';\n\nexport const List = styled.ol`\n  height: 200px;\n  overflow-x: auto;\n`;\nexport const Item = styled.li`\n  :not(:last-child) {\n    margin-bottom: 10px;\n  }\n\n  div {\n    display: flex;\n    justify-content: space-between;\n    padding-top: 10px;\n    padding-bottom: 10px;\n    padding-left: 10px;\n    padding-right: 10px;\n    border-radius: 10px;\n  }\n`;\n\nexport const Button = styled.button`\n  transition: all 200ms linear 0s;\n  border: 1px solid grey;\n  border-radius: 10px;\n  background-color: white;\n  cursor: pointer;\n  font-size: 15px;\n  :not(:last-child) {\n    margin-right: 10px;\n  }\n  :hover {\n    box-shadow: rgb(38, 57, 77) 0px 20px 30px -10px;\n    background: rgb(169, 219, 216);\n  }\n`;\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport {\n  selectContacts,\n  selectFilteredContacts,\n} from 'redux/contacts/selectors';\nimport { Button, Item, List } from './ContactList.styled';\n\nexport function ContactList() {\n  const filter = useSelector(selectFilteredContacts);\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const filterContactByName = () => {\n    const normalizedFilter = filter.toLowerCase().trim();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  };\n\n  return (\n    <List>\n      {filterContactByName().map(({ name, number, id }) => (\n        <Item key={id}>\n          <div>\n            <span>\n              {name}: {number}\n            </span>\n            <Button data=\"\" onClick={() => dispatch(deleteContact(id))}>\n              Delete\n            </Button>\n          </div>\n        </Item>\n      ))}\n    </List>\n  );\n}\n","import styled from 'styled-components';\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  -webkit-box-pack: center;\n  justify-content: center;\n  align-items: flex-start;\n  margin-bottom: 20px;\n\n  input {\n    margin-top: 10px;\n    width: 97%;\n\n    height: 20px;\n    padding-left: 10px;\n    border: 1px solid rgba(33, 33, 33, 0.2);\n    border-radius: 4px;\n    transition: border-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0s;\n\n    outline: none;\n    :hover,\n    :focus {\n      box-shadow: rgb(38, 57, 77) 0px 5px 30px -7px;\n    }\n  }\n`;\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/contacts/filterSlice';\nimport { selectFilteredContacts } from 'redux/contacts/selectors';\nimport { nanoid } from 'nanoid';\n\nimport { Label } from './Filter.styled';\n\nexport function Filter() {\n  const filter = useSelector(selectFilteredContacts);\n  const dispatch = useDispatch();\n\n  const findInputId = nanoid();\n  return (\n    <>\n      <Label htmlFor={findInputId}>\n        Find contacts by name\n        <input\n          onChange={e => dispatch(setFilter(e.target.value))}\n          value={filter}\n          name=\"filter\"\n          type=\"text\"\n          placeholder=\"Input name to find\"\n        />\n      </Label>\n    </>\n  );\n}\n","import styled from 'styled-components';\n\nexport const Box = styled.div`\n  border-radius: 10px;\n  box-shadow: 0 0 10px teal;\n  margin: 20px auto;\n  padding: 20px;\n  text-align: center;\n  max-width: 500px;\n\n  h1,\n  h2 {\n    color: teal;\n  }\n\n  div {\n    box-shadow: rgb(34 60 80 / 20%) 0px 5px 10px 2px;\n    padding-top: 20px;\n    padding-bottom: 20px;\n    padding-left: 30px;\n    padding-right: 30px;\n  }\n`;\n","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectIsLoading, selectError } from 'redux/contacts/selectors';\nimport { fetchContacts } from 'redux/contacts/operations';\n\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/ContactsFilter/Filter';\nimport { Box } from './ContactsPage.styled';\n\nconst ContactsPage = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <main>\n      <Box>\n        <h1>Phonebook</h1>\n        <ContactForm />\n        <h2>Contacts</h2>\n        <div>\n          <Filter />\n          {isLoading && !error && <b>Request in progress...</b>}\n          <ContactList />\n        </div>\n      </Box>\n    </main>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectFilteredContacts","filter","Form","styled","Label","Button","ContactForm","useState","name","setName","number","setNumber","useSelector","dispatch","useDispatch","nameInputId","nanoid","numberInputId","addNewContact","newContact","trim","find","contact","alert","addContact","reset","handleInputChange","e","target","value","action","onSubmit","preventDefault","htmlFor","onChange","type","placeholder","pattern","title","required","List","Item","ContactList","normalizedFilter","toLowerCase","includes","filterContactByName","map","id","data","onClick","deleteContact","Filter","findInputId","setFilter","Box","useEffect","fetchContacts"],"sourceRoot":""}